// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prometheus/client_golang/api/prometheus/v1 (interfaces: API)

// Package prometheus is a generated GoMock package.
package prometheus

import (
	context "context"
	reflect "reflect"
	time "time"

	v1 "github.com/prometheus/client_golang/api/prometheus/v1"
	model "github.com/prometheus/common/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AlertManagers mocks base method.
func (m *MockAPI) AlertManagers(arg0 context.Context) (v1.AlertManagersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlertManagers", arg0)
	ret0, _ := ret[0].(v1.AlertManagersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlertManagers indicates an expected call of AlertManagers.
func (mr *MockAPIMockRecorder) AlertManagers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertManagers", reflect.TypeOf((*MockAPI)(nil).AlertManagers), arg0)
}

// Alerts mocks base method.
func (m *MockAPI) Alerts(arg0 context.Context) (v1.AlertsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alerts", arg0)
	ret0, _ := ret[0].(v1.AlertsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Alerts indicates an expected call of Alerts.
func (mr *MockAPIMockRecorder) Alerts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alerts", reflect.TypeOf((*MockAPI)(nil).Alerts), arg0)
}

// Buildinfo mocks base method.
func (m *MockAPI) Buildinfo(arg0 context.Context) (v1.BuildinfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buildinfo", arg0)
	ret0, _ := ret[0].(v1.BuildinfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Buildinfo indicates an expected call of Buildinfo.
func (mr *MockAPIMockRecorder) Buildinfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buildinfo", reflect.TypeOf((*MockAPI)(nil).Buildinfo), arg0)
}

// CleanTombstones mocks base method.
func (m *MockAPI) CleanTombstones(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanTombstones", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanTombstones indicates an expected call of CleanTombstones.
func (mr *MockAPIMockRecorder) CleanTombstones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanTombstones", reflect.TypeOf((*MockAPI)(nil).CleanTombstones), arg0)
}

// Config mocks base method.
func (m *MockAPI) Config(arg0 context.Context) (v1.ConfigResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config", arg0)
	ret0, _ := ret[0].(v1.ConfigResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config.
func (mr *MockAPIMockRecorder) Config(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockAPI)(nil).Config), arg0)
}

// DeleteSeries mocks base method.
func (m *MockAPI) DeleteSeries(arg0 context.Context, arg1 []string, arg2, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeries", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeries indicates an expected call of DeleteSeries.
func (mr *MockAPIMockRecorder) DeleteSeries(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeries", reflect.TypeOf((*MockAPI)(nil).DeleteSeries), arg0, arg1, arg2, arg3)
}

// Flags mocks base method.
func (m *MockAPI) Flags(arg0 context.Context) (v1.FlagsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flags", arg0)
	ret0, _ := ret[0].(v1.FlagsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Flags indicates an expected call of Flags.
func (mr *MockAPIMockRecorder) Flags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flags", reflect.TypeOf((*MockAPI)(nil).Flags), arg0)
}

// LabelNames mocks base method.
func (m *MockAPI) LabelNames(arg0 context.Context, arg1 []string, arg2, arg3 time.Time) ([]string, v1.Warnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelNames", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(v1.Warnings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LabelNames indicates an expected call of LabelNames.
func (mr *MockAPIMockRecorder) LabelNames(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelNames", reflect.TypeOf((*MockAPI)(nil).LabelNames), arg0, arg1, arg2, arg3)
}

// LabelValues mocks base method.
func (m *MockAPI) LabelValues(arg0 context.Context, arg1 string, arg2 []string, arg3, arg4 time.Time) (model.LabelValues, v1.Warnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelValues", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(model.LabelValues)
	ret1, _ := ret[1].(v1.Warnings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LabelValues indicates an expected call of LabelValues.
func (mr *MockAPIMockRecorder) LabelValues(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelValues", reflect.TypeOf((*MockAPI)(nil).LabelValues), arg0, arg1, arg2, arg3, arg4)
}

// Metadata mocks base method.
func (m *MockAPI) Metadata(arg0 context.Context, arg1, arg2 string) (map[string][]v1.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]v1.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockAPIMockRecorder) Metadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockAPI)(nil).Metadata), arg0, arg1, arg2)
}

// Query mocks base method.
func (m *MockAPI) Query(arg0 context.Context, arg1 string, arg2 time.Time, arg3 ...v1.Option) (model.Value, v1.Warnings, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(v1.Warnings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query.
func (mr *MockAPIMockRecorder) Query(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockAPI)(nil).Query), varargs...)
}

// QueryExemplars mocks base method.
func (m *MockAPI) QueryExemplars(arg0 context.Context, arg1 string, arg2, arg3 time.Time) ([]v1.ExemplarQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryExemplars", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]v1.ExemplarQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryExemplars indicates an expected call of QueryExemplars.
func (mr *MockAPIMockRecorder) QueryExemplars(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryExemplars", reflect.TypeOf((*MockAPI)(nil).QueryExemplars), arg0, arg1, arg2, arg3)
}

// QueryRange mocks base method.
func (m *MockAPI) QueryRange(arg0 context.Context, arg1 string, arg2 v1.Range, arg3 ...v1.Option) (model.Value, v1.Warnings, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRange", varargs...)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(v1.Warnings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryRange indicates an expected call of QueryRange.
func (mr *MockAPIMockRecorder) QueryRange(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRange", reflect.TypeOf((*MockAPI)(nil).QueryRange), varargs...)
}

// Rules mocks base method.
func (m *MockAPI) Rules(arg0 context.Context) (v1.RulesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rules", arg0)
	ret0, _ := ret[0].(v1.RulesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rules indicates an expected call of Rules.
func (mr *MockAPIMockRecorder) Rules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rules", reflect.TypeOf((*MockAPI)(nil).Rules), arg0)
}

// Runtimeinfo mocks base method.
func (m *MockAPI) Runtimeinfo(arg0 context.Context) (v1.RuntimeinfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Runtimeinfo", arg0)
	ret0, _ := ret[0].(v1.RuntimeinfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Runtimeinfo indicates an expected call of Runtimeinfo.
func (mr *MockAPIMockRecorder) Runtimeinfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Runtimeinfo", reflect.TypeOf((*MockAPI)(nil).Runtimeinfo), arg0)
}

// Series mocks base method.
func (m *MockAPI) Series(arg0 context.Context, arg1 []string, arg2, arg3 time.Time) ([]model.LabelSet, v1.Warnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Series", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.LabelSet)
	ret1, _ := ret[1].(v1.Warnings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Series indicates an expected call of Series.
func (mr *MockAPIMockRecorder) Series(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Series", reflect.TypeOf((*MockAPI)(nil).Series), arg0, arg1, arg2, arg3)
}

// Snapshot mocks base method.
func (m *MockAPI) Snapshot(arg0 context.Context, arg1 bool) (v1.SnapshotResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", arg0, arg1)
	ret0, _ := ret[0].(v1.SnapshotResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockAPIMockRecorder) Snapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockAPI)(nil).Snapshot), arg0, arg1)
}

// TSDB mocks base method.
func (m *MockAPI) TSDB(arg0 context.Context) (v1.TSDBResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TSDB", arg0)
	ret0, _ := ret[0].(v1.TSDBResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TSDB indicates an expected call of TSDB.
func (mr *MockAPIMockRecorder) TSDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TSDB", reflect.TypeOf((*MockAPI)(nil).TSDB), arg0)
}

// Targets mocks base method.
func (m *MockAPI) Targets(arg0 context.Context) (v1.TargetsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Targets", arg0)
	ret0, _ := ret[0].(v1.TargetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Targets indicates an expected call of Targets.
func (mr *MockAPIMockRecorder) Targets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Targets", reflect.TypeOf((*MockAPI)(nil).Targets), arg0)
}

// TargetsMetadata mocks base method.
func (m *MockAPI) TargetsMetadata(arg0 context.Context, arg1, arg2, arg3 string) ([]v1.MetricMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetsMetadata", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]v1.MetricMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TargetsMetadata indicates an expected call of TargetsMetadata.
func (mr *MockAPIMockRecorder) TargetsMetadata(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetsMetadata", reflect.TypeOf((*MockAPI)(nil).TargetsMetadata), arg0, arg1, arg2, arg3)
}

// WalReplay mocks base method.
func (m *MockAPI) WalReplay(arg0 context.Context) (v1.WalReplayStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalReplay", arg0)
	ret0, _ := ret[0].(v1.WalReplayStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalReplay indicates an expected call of WalReplay.
func (mr *MockAPIMockRecorder) WalReplay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalReplay", reflect.TypeOf((*MockAPI)(nil).WalReplay), arg0)
}
